import strutils, terminal, json, os, options
import cmdutils
import ../flow/flow
import ../io/files, ../io/http
import ../modpack/manifest, ../modpack/version

proc paxInit*(force: bool): void =
  ## initialize a new modpack in the current directory
  if not force:
    rejectPaxProject()
    returnIfNot(promptYN("Are you sure you want to create a pax project in the current folder?", default=true))

  echoRoot(styleDim, "MANIFEST")
  var project = ManifestProject()
  project.name = prompt(promptPrefix & "Modpack name")
  project.author = prompt(promptPrefix & "Modpack author")
  project.version = prompt(promptPrefix & "Modpack version", default="1.0.0")
  project.mcVersion = prompt(promptPrefix & "Minecraft version", default="1.16.5").Version
  let loader = promptChoice(promptPrefix & "Loader", choices = @["forge", "fabric"], default = "forge")
  
  var loaderVersion: Option[Version]
  if loader == "forge":
    let forgeVersionJson = parseJson(fetch(forgeVersionUrl))
    loaderVersion = forgeVersionJson.getForgeVersion($project.mcVersion)
  else:
    let fabricVersionJson = parseJson(fetch(fabricVersionUrl($project.mcVersion)))
    loaderVersion = fabricVersionJson.getFabricVersion()
  if isNone(loaderVersion):
    echoError("This is either not a minecraft version, or no ", loader, " version exists for this minecraft version.")
    quit(1)
  var manifestLoaderVersion: string
  if loader == "forge":
    manifestLoaderVersion = "forge-" & ($loaderVersion.get()).split("-")[1]
  else:
    manifestLoaderVersion = "fabric-" & ($loaderVersion.get())
  project.mcModloaderId = manifestLoaderVersion
  echoDebug("Installed ", loader, " version ", fgGreen, project.mcModloaderId)

  echoInfo("Creating manifest..")
  removeDir(packFolder)
  createDirIfNotExists(packFolder)
  createDirIfNotExists(overridesFolder)
  writeFile(paxFile, "Modpack generated by PAX")
  writeFile(manifestFile, project.toJson.pretty)