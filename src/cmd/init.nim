import strutils, terminal, json
import ../flow/flow
import ../io/files, ../io/http
import ../modpack/manifest, ../modpack/version

proc paxInit*(force: bool): void =
  ## initialize a new modpack in the current directory
  if not force:
    rejectPaxProject()
    returnIfNot(promptYN("Are you sure you want to create a pax project in the current folder?", default=true))

  echoInfo("Updating databases..")
  let forgeVersionJson = parseJson(fetch(forgeVersionUrl))

  echoRoot(styleDim, "MANIFEST")
  var project = ManifestProject()
  project.name = prompt(promptPrefix & "Modpack name")
  project.author = prompt(promptPrefix & "Modpack author")
  project.version = prompt(promptPrefix & "Modpack version", default="1.0.0")
  project.mcVersion = prompt(promptPrefix & "Minecraft version", default="1.16.5").Version
  
  let recommendedForgeVersion = forgeVersionJson{"by_mcversion", $(project.mcVersion), "recommended"}.getStr().Version
  let latestForgeVersion = forgeVersionJson{"by_mcversion", $(project.mcVersion), "latest"}.getStr().Version
  let forgeVersion = if recommendedForgeVersion != "".Version: recommendedForgeVersion else: latestForgeVersion
  if forgeVersion == "".Version:
    echoError("This is either not a minecraft version, or no forge version exists for this minecraft version.")
    return
  let manifestForgeVersion = "forge-" & ($forgeVersion).split("-")[1]
  project.mcModloaderId = manifestForgeVersion
  echoDebug("Recommended Forge version is ", project.mcModloaderId)

  echoInfo("Creating manifest..")
  removeDir(packFolder)
  createDirIfNotExists(packFolder)
  createDirIfNotExists(overridesFolder)
  writeFile(paxFile, "Modpack generated by PAX")
  writeFile(manifestFile, project.toJson.pretty)